\title{Administration}{administration}

\use-plugin{concourse-docs}

\section{
  \title{\code{fly workers}}{fly-workers}

  To list the currently registered workers, including additional metadata, run:

  \codeblock{bash}{{
  $ fly -t example workers
  }}

  This can be useful for monitoring the status of your workers, if you suspect
  that one keeps dropping out of the pool or getting tasked with too many
  containers, etc.
}

\section{
  \title{\code{fly prune-worker}}{fly-prune-worker}

  To remove a stalled, landing, landed, or retiring worker, run:

  \codeblock{bash}{{
  $ fly -t example prune-worker --worker worker-name
  }}

  To prune \italic{all} stalled workers, run:

  \codeblock{bash}{{
  $ fly -t example prune-worker --all-stalled
  }}

  This is for those cases where you know a worker is not coming back. Note that
  running workers cannot be pruned, since they'll just re-register themselves
  anyway.
}

\section{
  \title{\code{fly land-worker}}{fly-land-worker}

  To initiate landing of a worker and eventually (after draining) cause it to
  exit, run:

  \codeblock{bash}{{
  $ fly -t example land-worker --worker worker-name
  }}
}

\section{
  \title{\code{fly containers}}{fly-containers}

  To list the active containers across all your workers, run:

  \codeblock{bash}{{
  $ fly -t example containers
  }}

  This can be useful when discovering the containers available for
  \reference{fly-intercept}ing.
}

\section{
  \title{\code{fly volumes}}{fly-volumes}

  To list the active volumes across all your workers, run:

  \codeblock{bash}{{
  $ fly -t example volumes
  }}

  This can be useful to observe the caches warming across your cluster, and
  could be a good indicator of disk use.
}

\section{
  \title{\code{fly curl}}{fly-curl}

  To execute an arbirary API request, you can run something like the following:

  \codeblock{bash}{{
  $ fly -t example curl /api/v1/info
  }}

  This command is just a shim that runs \code{curl} under the hood. To pass
  flags to \code{curl}, pass a \code{--} argument after the path so that
  \code{fly} can distinguish them from its own flags:

  \codeblock{bash}{{
  $ fly -t example curl /api/v1/builds -- \\
      -X PUT \\
      -H "Content-type: application/json" \\
      -d @plan.json
  }}

  Note: if you use this command the assumption is that you know what you're
  doing. If you find yourself using this command often, let us know - perhaps
  there's a missing command!
}
