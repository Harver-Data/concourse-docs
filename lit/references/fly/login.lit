\title{\code{fly login}}{fly-login}
\use-plugin{concourse-docs}


The first thing you'll want to do is authenticate with your target. This is
done with the \reference{fly-login} command. This is also useful to save
targets under a more convenient alias, so you don't have to type out the URL
all the time:

The \code{login} command serves double duty: it authenticates with a given
endpoint, and saves it under a more convenient name. The name and token are
stored in \code{~/.flyrc} (though you shouldn't really edit the file
manually).

Concourse deployments can be occupied by multiple \reference{teams}{teams}.
To specify the team to which to log in, specify the \code{--team-name} or
\code{-n} flag. If not specified, this defaults to the \reference{main-team}.

So, to log in to a team \code{my-team} an endpoint served at
\code{https://ci.example.com} and save it as the more convenient name
\code{example}, you would run:

  \codeblock{bash}{{{
  $ fly --target example login --team-name my-team \
     --concourse-url https://ci.example.com
  }}}

The \code{login} command will see which authentication methods are available
for the specified team and prompt you to choose one. For basic auth, it will
ask your username and password and use them to acquire a token. For OAuth, it
will give you a link to click, and after you've gone through the OAuth flow
it will print an OAuth token on the page that you can then copy and
paste into the prompt.

Note that if no authentication methods are configured, \code{fly} will
acquire a token without any prompting. You can then use the alias like
normal.

In any case, a token is saved in your \code{~/.flyrc}, which will expire
after one day.

If your Concourse uses SSL but does not have a certificate signed by a
trusted CA, you can use the \code{--ca-cert} flag so that \code{fly} can
trust the connection, like so:

\codeblock{bash}{{
$ fly -t example login -c https://ci.example.com --ca-cert ./ca.crt
}}

This will read the value out of the file \code{./ca.crt} and save it into
\code{~/.flyrc} so you don't have to pass it on every \code{login}
invocation.

If your Concourse instance is protected by a proxy server requiring client
certificates, you can use \code{--client-cert} and \code{--client-key} to
point to where your certificate is stored. These paths will be stored in
\code{.flyrc} and the certificate will by attached to every request made to
that target.

\codeblock{bash}{{
$ fly -t example login -c https://ci-example.com \\
    --client-cert ./client.pem \\
    --client-key ./client.key
}}

After you've logged in you can use \code{--target example} (or \code{-t
example} for short) to run a command against the saved target \code{example}.
For example, \code{fly -t example builds} will list the last few builds on the
\code{example} Concourse instance.

The \code{-t} flag is intentionally stateless and must be explicitly added
to each command. This reduces the risk of accidentally running a command against the
wrong environment when you have multiple targets defined.
