\title{Generic SAML auth}{generic-saml-auth}

\use-plugin{concourse-docs}
\omit-children-from-table-of-contents

A Concourse server can authenticate against any valid SAML auth provider.

\section{
  \title{Authentication}{generic-saml-authentication}

  First you'll need to create an application with your SAML provider. Note that
  the terminology used for configuring an application may vary between SAML
  providers - this document uses Okta's terminology.

  SAML Assertion Consumer Service (ACS) URL must be the URL of your
  Concourse server with \code{/sky/issuer/callback} appended.

  For example, Concourse's own CI server's callback URL would be:

  \codeblock{bash}{{{
  https://ci.concourse-ci.org/sky/issuer/callback
  }}}

  Audience URI (SP Entity ID) must match \code{CONCOURSE_SAML_ENTITY_ISSUER},
  which defaults to the URL of your Concourse server with \code{/sky/issuer/callback} appended.

  Attribute statements that you define in the SAML provider can be remapped in Concourse:

  \codeblock{bash}{{{
  CONCOURSE_SAML_USERNAME_ATTR=name   # default
  CONCOURSE_SAML_EMAIL_ATTR=email     # default
  CONCOURSE_SAML_GROUPS_ATTR=groups   # default
  }}}

  Finally, the SAML provider will generate a SSO URL, a CA certificate, and an
  Identity Provider Issuer. These values correspond with \code{CONCOURSE_SAML_SSO_URL},
  \code{CONCOURSE_SAML_CA_CERT}, and \code{CONCOURSE_SAML_SSO_ISSUER} respectively.

  A typical \reference{web-node} env config may look something like this:

  \codeblock{bash}{{{
  CONCOURSE_SAML_DISPLAY_NAME=Okta
  CONCOURSE_SAML_SSO_URL=https://acme.okta.com/app/Y/Z/sso/saml
  CONCOURSE_SAML_CA_CERT=/path/to/ca_cert
  CONCOURSE_SAML_SSO_ISSUER=http://www.okta.com/X
  }}}

  Consult \code{concourse web --help} for a full list of flags with
  descriptions.
}

\section{
  \title{Authorization}{generic-saml-authorization}

  SAML users and groups can be authorized for a team by passing the following
  flags to \reference{fly-set-team}:

  \definitions{
    \definition{\code{--saml-user=USERNAME}}{
      Authorize an individual user.
    }
  }{
    \definition{\code{--saml-group=GROUP_NAME}}{
      Authorize anyone from the group.

      You may only configure groups if the auth provider exposes this
      information in either the token itself, or in the contents of the
      userinfo endpoint.

      You can configure which attribute points to the groups information by
      specifying \code{CONCOURSE_SAML_GROUPS_ATTR} on the \reference{web-node}.
    }
  }

  For example:

  \codeblock{bash}{{{
  $ fly set-team -n my-team \
      --saml-user my-username \
      --saml-group my-group
  }}}

  ...or via \code{--config} for \reference{setting-roles}{setting user roles}:

  \codeblock{bash}{{{
  roles:
  - name: member
    saml:
      users: ["my-username"]
      groups: ["my-groups"]
  }}}

  \section{
    \title{Configuring \code{main} Team Authorization}

    SAML users and groups can be added to the \reference{main-team}
    authorization config by setting the following env on the
    \reference{web-node}:

    \codeblock{bash}{{{
    CONCOURSE_MAIN_TEAM_SAML_USER=my-user
    CONCOURSE_MAIN_TEAM_SAML_GROUP=my-group
    }}}

    Multiple users and groups may be specified by comma-separating them.
  }
}
