\title{Git Guides}

\use-plugin{concourse-docs}
\split-sections
\table-of-contents

\section{
  \title{Basic Git Operations}
  \omit-children-from-table-of-contents

  All of these examples use the
  \link{concourse/git-resource}{https://github.com/concourse/git-resource}
  image. That image is probably the most popular git resource for Concourse
  since it is shipped in the
  \link{concourse/concourse}{https://hub.docker.com/r/concourse/concourse}
  image and in the tarball on the \link{Github release
  page}{https://github.com/concourse/concourse/releases}. It is not the only
  resource available for working with git-related resources. If you don't see
  your use-case on this page then there is probably another resource that you
  can use. For example, Pull Request workflows can be accomplished with the
  \link{teliaoss/github-pr-resource}{https://github.com/telia-oss/github-pr-resource}.

  Check out the \link{docs}{https://github.com/concourse/git-resource} for the
  git resource for all configuration options.

  \section{
    \title{Fetching a Repository}

    Here is how you fetch the contents of a git repository and use it in a
    task.

    \codeblock{yaml}{{
    resources:
    - name: concourse-examples
      type: git
      icon: github
      source:
        uri: https://github.com/concourse/examples

    jobs:
    - name: read-the-readme
      plan:
      - get: concourse-examples
      - task: cat-readme
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: busybox
          inputs: # pass concourse-examples into this task step
          - name: concourse-examples
          run:
            path: cat
            args: ["concourse-examples/README.md"]
    }}
  }

  \section{
    \title{Creating Commits and Tags}
    Here's a simple way to create a commit using a bash script.

    \codeblock{yaml}{{
    resources:
    - name: repo-main
      type: git
      icon: github
      source:
        uri: https://github.com/user/my-repo
        branch: main

    jobs:
    - name: create-a-commit
      plan:
      - get: repo-main
      - task: commit-and-tag
        config:
          platform: linux
          image_resource:
            type: registry-image
            source:
              repository: gitea/gitea # use any image that has the git cli
          inputs:
          - name: repo-main
          outputs:
          # to pass the commit to the following steps specify
          # the "repo-main" as an output as well
          - name: repo-main
          run:
            path: sh
            args:
            - -cx
            # this is just a bash script
            - |
              cd repo-main
              # edit a file / make a change
              date +%Y-%m-%d > todays-date
              git add ./todays-date
              git commit -m "Add todays date"
              git tag v0.1.6
      # push commit and tag
      - put: repo-main
        params:
          # specify the "repo-main" artifact as the location
          repository: repo-main
    }}
  }

  \section{
    \title{Merging Branches}
    Here is how you can merge two branches. Common if you are using
    \link{gitflow}{https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow}
    and need to merge a \code{dev} branch into \code{main} every so often.

    \codeblock{yaml}{{
    resources:
    - name: repo-main
      type: git
      icon: github
      source:
        uri: https://github.com/user/my-repo
        branch: main

    - name: repo-dev
      type: git
      icon: github
      source:
        uri: https://github.com/user/my-repo
        branch: dev

    jobs:
    - name: merge-dev-into-main
      plan:
      - get: repo-dev
      - put: repo-main
        params:
          repository: repo-dev
          merge: true
    }}
  }
}

\section{
  \title{Multi-Branch Workflows}{multi-branch-workflows}
  \omit-children-from-table-of-contents

  Teams may make use of multiple branches for their development. For instance,
  some teams create feature branches while working on new functionality - once
  this functionality is ready, the branch will be merged into the main branch
  and the feature branch will be deleted.

  While a feature is under development, you'll often want to run tests against
  the feature branch and possibly deploy to a staging environment. To model this
  in Concourse, you'll need to have a pipeline for each active feature branch.
  Manually setting (and eventually archiving) a pipeline for each feature branch
  would be quite a burden. For this type of workflow, Concourse has a few
  important tools to help you out: the \reference{set-pipeline-step},
  \reference{schema.step.across}, and \reference{instanced-pipelines}{instanced
  pipelines}.

  \warn{
    \reference{schema.step.across} and \reference{instanced-pipelines}{instanced pipelines}
    are both experimental features, and must be enabled with the feature flags
    \code{CONCOURSE_ENABLE_ACROSS_STEP} and \code{CONCOURSE_ENABLE_PIPELINE_INSTANCES}, respectively.
  }

  In this guide, we'll cover:

  \ordered-list{
    Writing a pipeline to \reference{multi-branch-test-build-deploy} a branch
    to a staging environment. We'll use \link{Terraform}{https://www.terraform.io/}
    for our deployment
  }{
    \reference{multi-branch-tracking-branches} in a repository; for each
    branch, we'll set a pipeline (using the \reference{set-pipeline-step} and
    \reference{schema.step.across})
  }{
    Automatically \reference{multi-branch-cleaning-up} after branches get
    merged or deleted
  }

  \section{
    \title{Test, Build & Deploy}{multi-branch-test-build-deploy}

    We'll start out by defining the pipeline that should run for each active
    branch. For this example, we'll be working with the following \link{sample Go
    application}{https://github.com/concourse/examples/tree/master/apps/golang}.

    Our pipeline will have three stages:

    \ordered-list{
      Run unit tests
    }{
      Build and upload a binary to a blobstore (in our case, we'll use
      \link{Google Cloud Storage}{https://cloud.google.com/storage})
    }{
      Trigger a \code{terraform apply} to deploy our app to a staging
      environment. The \link{Terraform module}{https://github.com/concourse/examples/blob/master/terraform/staging/main.tf}
      we'll use here doesn't actually provision any infrastructure, and is just used
      as an example
    }

    Since the pipeline config is intended to be used as a template for multiple
    different branches, we can use \reference{vars} to parameterize the config.
    In particular, we'll use the vars \code{((feature))} and \code{((branch))},
    which represent the name of the feature and the name of the branch, respectively.

    Below is the full pipeline config:

    \link{\code{examples/pipelines/multi-branch/template.yml}}{https://github.com/concourse/examples/blob/master/pipelines/multi-branch/template.yml}
    \remote-codeblock{yaml}{https://raw.githubusercontent.com/concourse/examples/master/pipelines/multi-branch/template.yml}
  }

  \section{
    \title{Tracking Branches}{multi-branch-tracking-branches}

    In addition to the branch pipeline template, we'll also need a pipeline to
    track the list of branches and set a pipeline for each one.

    To track the list of branches in a repository, we can use
    \link{aoldershaw/git-branches-resource}{https://github.com/aoldershaw/git-branches-resource}.
    This \reference{resource-types}{\code{resource_type}} emits a new
    \reference{resource-versions}{resource version} whenever a branch is created or
    deleted. It also lets us filter the list of branches by a regular expression.
    In this case, let's assume our feature branches match the regular expression
    \code{feature/.*}.

    Below is the full pipeline config for this tracker pipeline:

    \link{\code{examples/pipelines/multi-branch/tracker.yml}}{https://github.com/concourse/examples/blob/master/pipelines/multi-branch/tracker.yml}
    \codeblock{yaml}{{{
      resource_types:
      - name: git-branches
        type: registry-image
        source:
          repository: aoldershaw/git-branches-resource

      resources:
      - name: feature-branches
        type: git-branches
        source:
          uri: https://github.com/concourse/examples
          # The "(?P<name>pattern)" syntax defines a named capture group.
          # aoldershaw/git-branches-resource emits the value of each named capture
          # group under the `groups` key.
          #
          # e.g. feature/some-feature ==> {"groups": {"feature": "some-feature"}}
          branch_regex: 'feature/(?P<feature>.*)'

      - name: examples
        type: git
        source:
          uri: https://github.com/concourse/examples

      jobs:
      - name: set-feature-pipelines
        plan:
        - in_parallel:
          - get: feature-branches
            trigger: true
          - get: examples
        - load_var: branches
          file: feature-branches/branches.json
        - across:
          - var: branch
            values: ((.:branches))
          set_pipeline: dev
          file: examples/pipelines/multi-branch/template.yml
          instance_vars: {feature: ((.:branch.groups.feature))}
          vars: {branch: ((.:branch.name))}
    }}}

    We set each pipeline as an \reference{instanced-pipelines}{instanced
    pipeline} - this will result in Concourse grouping all of the related
    \code{dev} pipelines in the UI.
  }

  \section{
    \title{Cleaning Up Old Workspaces}{multi-branch-cleaning-up}

    With the setup described in \reference{multi-branch-tracking-branches},
    Concourse will automatically archive any pipelines for branches that get
    removed. However, Concourse doesn't know that it should destroy Terraform
    workspaces when a branch is removed. To accomplish this, we can yet again
    make use of the \link{Terraform resource}{https://github.com/ljfranklin/terraform-resource}
    to destroy these workspaces. We'll add another job to the tracker pipeline
    that figures out which workspaces don't belong to an active branch and
    destroy them.

    \link{\code{examples/pipelines/multi-branch/tracker.yml}}{https://github.com/concourse/examples/blob/master/pipelines/multi-branch/tracker.yml}
    \codeblock{yaml}{{{
      resource_types:
      - name: git-branches
        ...

      - name: terraform
        type: registry-image
        source:
          repository: ljfranklin/terraform-resource

      resources:
      - name: feature-branches
        ...

      - name: examples
        ...

      - name: staging-env
        type: terraform
        source:
          backend_type: gcs
          backend_config: &terraform_backend_config
            bucket: concourse-examples
            prefix: multi-branch/terraform
            credentials: ((gcp_service_account_key))

      jobs:
      - name: set-feature-pipelines
        ...

      - name: cleanup-inactive-workspaces
        plan:
        - in_parallel:
          - get: feature-branches
            passed: [set-feature-pipelines]
            trigger: true
          - get: examples
        - task: find-inactive-workspaces
          config:
            platform: linux
            image_resource:
              type: registry-image
              source: {repository: hashicorp/terraform}
            inputs:
            - name: feature-branches
            outputs:
            - name: extra-workspaces
            params:
              TERRAFORM_BACKEND_CONFIG:
                gcs: *terraform_backend_config
            run:
              path: sh
              args:
              - -c
              - |
                set -euo pipefail

                apk add -q jq

                active_features="$(jq '[.[].groups.feature]' feature-branches/branches.json)"

                jq -n "{terraform: {backend: $TERRAFORM_BACKEND_CONFIG}}" > backend.tf.json
                terraform init

                # List all active workspaces, ignoring the default workspace
                active_workspaces="$(terraform workspace list | grep -v '^[*]' | tr -d ' ' | jq --raw-input --slurp 'split("\n") | map(select(. != ""))')"

                jq -n "$active_workspaces - $active_features" > extra-workspaces/workspaces.json
        - load_var: extra_workspaces
          file: extra-workspaces/workspaces.json
        - across:
          - var: workspace
            values: ((.:extra_workspaces))
          put: staging-env
          params:
            terraform_source: examples/terraform/staging
            env_name: ((.:workspace))
            action: destroy
          get_params:
            action: destroy
          }}}
        }
}
